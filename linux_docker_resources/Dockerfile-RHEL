FROM almalinux:8
ARG ROS_DISTRO=rolling

# Add some repos
RUN dnf install epel-release epel-release 'dnf-command(config-manager)' --refresh -y && \
    dnf config-manager --set-enabled powertools && \
    rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-*

# Install foundation packages
RUN dnf install \
    cmake \
    gcc-c++ \
    git \
    glibc-langpack-en \
    make \
    matchbox-window-manager \
    mesa-dri-drivers \
    net-tools \
    patch \
    python3-bloom \
    python3-colcon-bash \
    python3-colcon-cmake \
    python3-colcon-core \
    python3-colcon-defaults \
    python3-colcon-library-path \
    python3-colcon-metadata \
    python3-colcon-mixin \
    python3-colcon-output \
    python3-colcon-package-information \
    python3-colcon-package-selection \
    python3-colcon-parallel-executor \
    python3-colcon-pkg-config \
    python3-colcon-powershell \
    python3-colcon-python-setup-py \
    python3-colcon-recursive-crawl \
    python3-colcon-ros \
    python3-colcon-test-result \
    python3-colcon-zsh \
    python3-devel \
    python3-pip \
    python3-rosdep \
    python3-vcstool \
    python3-virtualenv \
    sudo \
    vim \
    wget \
    xorg-x11-server-Xvfb \
    --refresh -y

# Try to update to any ROS packages currently in testing
RUN dnf update \
    python3-bloom* \
    python3-catkin* \
    python3-colcon* \
    python3-ros* \
    python3-vcstool \
    --enablerepo=epel-testing --skip-broken --refresh -y

# Initialize rosdep
RUN rosdep init && rosdep update

# Install a newer version of pytest
RUN python3 -m pip install -U pytest pytest-rerunfailures

# These dependencies were generated by invoking rosdep on the latest version of the target workspace:
# rosdep install --from-paths src --ignore-src --simulate --reinstall --skip-keys ...
RUN dnf install \
    CUnit-devel \
    acl \
    assimp-devel \
    bison \
    boost-devel \
    bullet-devel \
    clang \
    clang-tools-extra \
    cmake3 \
    console-bridge-devel \
    cppcheck \
    cppunit-devel \
    curl \
    doxygen \
    eigen3-devel \
    file \
    freetype \
    freetype-devel \
    git \
    gmock-devel \
    google-benchmark-devel \
    graphviz \
    gtest-devel \
    libX11-devel \
    libXaw-devel \
    libXext-devel \
    libXrandr-devel \
    libacl-devel \
    libatomic \
    libcurl-devel \
    libsq3-devel \
    libxml2 \
    libyaml-devel \
    libzstd-devel \
    log4cxx-devel \
    mesa-libGL-devel \
    mesa-libGLU-devel \
    opencv-devel \
    openssl \
    openssl-devel \
    orocos-kdl-devel \
    pkgconfig \
    pybind11-devel \
    python3-PyYAML \
    python3-argcomplete \
    python3-cairo \
    python3-catkin_pkg \
    python3-cryptography \
    python3-devel \
    python3-empy \
    python3-flake8 \
    python3-importlib-metadata \
    python3-importlib-resources \
    python3-lark-parser \
    python3-lxml \
    python3-matplotlib \
    python3-mock \
    python3-netifaces \
    python3-nose \
    python3-numpy \
    python3-packaging \
    python3-pillow \
    python3-psutil \
    python3-pycodestyle \
    python3-pydocstyle \
    python3-pydot \
    python3-pyflakes \
    python3-pygraphviz \
    python3-pykdl \
    python3-pytest \
    python3-pytest-cov \
    python3-pytest-mock \
    python3-pytest-timeout \
    python3-qt5-devel \
    python3-rosdistro \
    python3-setuptools \
    python3-sip-devel \
    qt5-qtbase \
    qt5-qtbase-devel \
    qt5-qtbase-gui \
    redhat-rpm-config \
    spdlog-devel \
    tango-icon-theme \
    tinyxml-devel \
    tinyxml2-devel \
    uncrustify \
    yaml-cpp-devel \
    yamllint \
    --refresh -y

# Install dependencies of Connext and its installer
RUN dnf install \
    libnsl2-devel \
    python3-pexpect \
    --refresh -y

# Get and install the RTI web binaries.
# Connext 5.3.1 for galactic and earlier.
RUN if [ "$ROS_DISTRO" = "foxy" -o "$ROS_DISTRO" = "galactic" ]; then \
       cd /tmp && curl --silent https://s3.amazonaws.com/RTI/Bundles/5.3.1/Evaluation/rti_connext_dds_secure-5.3.1-eval-x64Linux3gcc5.4.0.tar.gz | tar -xz \
       && tar -xvf /tmp/openssl-1.0.2n-target-x64Linux3gcc5.4.0.tar.gz; \
    fi
# Connext 6.0.1 for humble and beyond, the evaluation bundles don't contain security extensions so we need to distribute the pro binaries to ourselves.
COPY rticonnextdds-src/ /tmp/rticonnextdds-src
RUN if [ "$ROS_DISTRO" != "foxy" -a "$ROS_DISTRO" != "galactic" ]; then \
      for splitpkg in \
        /tmp/rticonnextdds-src/rti_connext_dds-6.0.1-pro-host-x64Linux.run \
        /tmp/rticonnextdds-src/rti_connext_dds-6.0.1.25-pro-host-x64Linux.rtipkg \
        /tmp/rticonnextdds-src/rti_connext_dds-6.0.1.25-pro-target-x64Linux4gcc7.3.0.rtipkg; \
      do \
        cat $(echo ${splitpkg}.0?? | sort) > $splitpkg; \
      done; \
      chmod 755 /tmp/rticonnextdds-src/rti_connext_dds-6.0.1-pro-host-x64Linux.run; \
    fi
ADD rti_web_binaries_install_script.py /tmp/rti_web_binaries_install_script.py

# Add the RTI license file.
ADD rticonnextdds-license/rti_license.dat /tmp/rti_license.dat

# automatic invalidation once every day.
RUN echo "@today_str"
RUN dnf update --refresh -y

ENV CMAKE_PREFIX_PATH=/usr
ENV DISPLAY=:99
ENV LANG=en_US.UTF-8

# Create a user to own the build output.
RUN useradd -u 1234 -m rosbuild
RUN sudo -H -u rosbuild -- git config --global user.email "jenkins@ci.ros2.org"
RUN sudo -H -u rosbuild -- git config --global user.name "Jenkins ROS 2"
RUN echo 'rosbuild ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# RHEL 8 doesn't have Asio yet, but Fast-DDS can bundle it
ADD fastrtps-bundle-asio.meta /home/rosbuild/.colcon/metadata/fastrtps.meta
# The version of Eigen in RHEL-8 (3.3.4) has a bug in it that causes
# many warnings from "-Wint-in-bool-context".  Suppress it here.
ADD tf2_eigen-disable-compiler-warning.meta /home/rosbuild/.colcon/metadata/tf2_eigen.meta
RUN chown rosbuild: /home/rosbuild/.colcon -R

# Add an entry point which changes rosbuild's UID from 1234 to the UID of the invoking user.
# This means that the generated files will have the same ownership as the host OS user.
COPY entry_point.sh /entry_point.sh
RUN chmod 755 /entry_point.sh

ENTRYPOINT ["/entry_point.sh"]

CMD ["matchbox-window-manager > /dev/null 2>&1 & python3 -u run_ros2_batch.py $CI_ARGS"]
